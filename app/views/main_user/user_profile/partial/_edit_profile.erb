<%= form_for(@user,:url => user_profile_update_path,method: :post,:html => {:id => "main_profile_form"}) do |u| %>
    <% if @user.errors.any? %>
        <div id="error_explanation">
          <h2><%= pluralize(@user.errors.count, 'error') %> prohibited this status from being saved:</h2>
          <ul>
            <% @user.errors.full_messages.each do |message| %>
                <li><%= message %></li>
            <% end %>
          </ul>
        </div>
    <% end %>
    <div class="form-group">
      <%= image_tag @img.avatar.url(:thumb),{:class => 'img-rounded'} %>
    </div>
    <div class="form-group">
      <%= u.text_field :first_name,{:class => "form-control",:maxlength => 20} %>
      <%= hidden_field_tag(nil,@user.first_name,:id => "original_first_name") %>

    </div>
    <div class="form-group">
      <%= u.text_field :last_name,{:class => "form-control",:id => "profile_lastname",:maxlength => 20} %>
      <%= hidden_field_tag(nil,@user.last_name,:id => "original_last_name") %>
    </div>
    <span id="profile_update_assert"></span>
    <div class="form-group">
      <%= u.submit("submit",{:id => "submit_profile_button"}) %>
    </div>
<% end %>

<script>

  var changeParser = function(options){
      this.$form =  options.input_form  ||  $("#main_profile_form");
      this.$form_inputs = options.form_inputs || $(this.$form.find(":input"));
      this.name_reg =    /\.*\[(.*)\]/g;
      this.init_listeners();
  };

  changeParser.prototype.parse = function(input){
       var $changed = $(input),
               name = $changed.attr('name');

      this.$form.find("hidden").attr("name",name)
      var parsed = this.name_reg.exec(name);
      if(typeof  parsed === "undefined"  || parsed === null){
          parsed = this.name_reg.exec(name);
      }
      name = "#original_" + parsed[1];
      var  $resolved = $(name);

          if($changed.val() === $resolved.val()){
              $changed.attr("state","default");
          }else{
              $changed.attr("state","changed");
          }
  };
  changeParser.prototype.init_listeners = function(){
      var $form = this.$form_inputs;
      var self = this;
      $form.keydown(function(e){
          return self.parse(e.currentTarget)
      });

  };

    $(function(){
        var par = new changeParser({});

        $("#main_profile_form").on("submit",function(e){
            e.preventDefault();
            var $form = $("#main_profile_form");
            var data = $form.serialize();
            var $submit_button = $("#submit_profile_button");
            var $update_assert =  $("#profile_update_assert");
           return $.ajax({
                url: '<%= url_for(:user_profile_update)%>',
                data: data,
                cache: false,
               dataType: "JSON",
               type: 'POST',
                beforeSend : function(){
                    $update_assert.css("color","green").text("Processing..");
                   $submit_button.prop('disabled',true);
                },
                error : function(){
                    alert("oops, Something wrong. Please try to reload page and try again.");
                    $submit_button.prop('disabled',false);
                },
                success: function(response){
                    $update_assert.css("color","green").text("Profile has been successfully updated!");
                    $submit_button.prop('disabled',true);
                    $submit_button.prop('disabled',false);
                }
            });
        });
    });
</script>

<%= render 'main_user/user_profile/partial/profile_image_uploader' %>
